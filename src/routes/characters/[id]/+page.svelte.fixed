<!-- Exact path must be: /Users/jluker/Vardon/src/routes/characters/[id]/+page.svelte -->
<script lang="ts">
	// Core imports
	import { onMount } from 'svelte';
	
	// Types
	import type { PageData } from './$types';
	import type { AssembledCharacter } from '$lib/domain/character/characterTypes';
	import type { CompleteCharacter } from '$lib/db/gameRules.api';
	
	// Game Engine and Assembler
	import { initializeApplication } from '$lib/domain/application';
	import { CharacterAssembler } from '$lib/domain/character/CharacterAssembler';
	import type { GameEngine } from '$lib/domain/core/GameEngine';
	import type { FeatureRegistry } from '$lib/domain/config/FeatureRegistry';

	// Game API
	import { GameRulesAPI } from '$lib/db/gameRules.api';
	import { supabase } from '$lib/db/supabaseClient';
	
	// UI Components
	import CharacterHeader from '$lib/ui/CharacterHeader.svelte';
	import HPTracker from '$lib/ui/HPTracker.svelte';
	import AbilityScores from '$lib/ui/AbilityScores.svelte';
	import Skills from '$lib/ui/Skills.svelte';
	import Saves from '$lib/ui/Saves.svelte';
	import CombatStats from '$lib/ui/CombatStats.svelte';
	import ACStats from '$lib/ui/ACStats.svelte';
	import ClassFeatures from '$lib/ui/ClassFeatures.svelte';
	import Feats from '$lib/ui/Feats.svelte';
	import Spells from '$lib/ui/Spells.svelte';
	import SpellSlots from '$lib/ui/SpellSlots.svelte';
	import Corruptions from '$lib/ui/Corruptions.svelte';
	import Archetypes from '$lib/ui/Archetypes.svelte';
	import Discoveries from '$lib/ui/Discoveries.svelte';
	import WildTalents from '$lib/ui/WildTalents.svelte';
	import KiPowers from '$lib/ui/KiPowers.svelte';
	import Bloodlines from '$lib/ui/Bloodlines.svelte';
	import Enhancements from '$lib/ui/Enhancements.svelte';
	import AncestryTraits from '$lib/ui/AncestryTraits.svelte';
	import Prerequisites from '$lib/ui/Prerequisites.svelte';
	
	// UI Framework Components
	import * as Tabs from '$lib/components/ui/tabs';
		
	// Props from the load function
	let { data } = $props<{ data: PageData }>();
	
	// State
	let rawCharacter = $state<CompleteCharacter | null>(null);
	let character = $state<AssembledCharacter | null>(null);
	let isLoading = $state(true);
	let error = $state<string | null>(null);
	let diagnosticInfo = $state<Record<string, any>>({});
	
	// Game Engine Components
	let engine = $state<GameEngine | null>(null);
	let gameAPI = $state<GameRulesAPI | null>(null);
	let featureRegistry = $state<FeatureRegistry | null>(null); 
	let characterAssembler = $state<CharacterAssembler | null>(null);
	
	// Helper function for timestamps in logs
	function getTimestamp() {
		const now = new Date();
		return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}.${now.getMilliseconds().toString().padStart(3, '0')}`;
	}
	
	// Initialize on component mount instead of using $effect
	onMount(async () => {
		console.log(`${getTimestamp()} - Character page mounted with ID: ${data?.id}`);
		
		// Initialize gameAPI
		gameAPI = new GameRulesAPI(supabase);
		
		// Debug the server data received
		console.log(`${getTimestamp()} - Server data:`, {
			id: data?.id,
			hasRawCharacter: !!data?.rawCharacter,
			loadedAt: data?.loadedAt
		});
		
		if (data?.rawCharacter) {
			console.log(`${getTimestamp()} - Using raw character data from server`);
			// Save the raw character data immediately
			rawCharacter = data.rawCharacter;
			
			// Log character basics for debugging
			console.log(`${getTimestamp()} - Character basics:`, {
				id: rawCharacter.id,
				name: rawCharacter.name,
				classes: rawCharacter.game_character_class?.map(c => c.class?.name || 'Unknown Class'),
				ancestry: rawCharacter.game_character_ancestry?.[0]?.ancestry?.name || 'Unknown Ancestry'
			});
			
			// Load the character in a try/catch to handle errors
			try {
				await loadCharacter();
			} catch (err) {
				console.error(`${getTimestamp()} - Error in onMount loadCharacter:`, err);
				error = err instanceof Error ? err.message : 'Failed to load character during mount';
				isLoading = false;
			}
		} else {
			console.warn(`${getTimestamp()} - No character data received from server`);
			error = 'No character data received from server';
			isLoading = false;
		}

		// Return cleanup function
		return () => {
			if (engine) {
				console.log(`${getTimestamp()} - Shutting down engine`);
				engine.shutdown();
				engine = null;
				characterAssembler = null;
			}
		};
	});
	
	async function loadCharacter() {
		// Skip if already loaded and not loading
		if (character && !isLoading) {
			console.log(`${getTimestamp()} - Character already loaded, skipping initialization`);
			return;
		}
		
		// Set loading state once
		if (!isLoading) {
			console.log(`${getTimestamp()} - Starting character loading process`);
			isLoading = true;
			error = null;
		}
		
		try {
			// Verify raw character data exists
			if (!rawCharacter) {
				console.error(`${getTimestamp()} - Raw character data is missing`);
				throw new Error('Missing character data: rawCharacter is null or undefined');
			}
			
			console.log(`${getTimestamp()} - Raw character data verified, ID: ${rawCharacter.id}`);
			
			// Initialize the application if not already done (lazy init)
			if (!engine || !characterAssembler) {
				console.log(`${getTimestamp()} - Initializing application and engine components`);
				
				// Create GameAPI instance if not already done
				if (!gameAPI) {
					console.log(`${getTimestamp()} - Creating GameRulesAPI instance`);
					gameAPI = new GameRulesAPI(supabase);
				}
				
				// Pass the newly created GameAPI instance
				const gameData = {
					gameAPI: gameAPI
				};
				
				console.log(`${getTimestamp()} - Calling initializeApplication with gameAPI:`, { 
					hasGameAPI: !!gameData.gameAPI 
				});
				
				try {
					const app = await initializeApplication(gameData);
					
					// Verify application initialization results
					if (!app) {
						throw new Error('Application initialization returned null or undefined');
					}
					
					engine = app.engine;
					featureRegistry = app.featureRegistry;
					characterAssembler = app.characterAssembler;
					
					diagnosticInfo = {
						engineInitialized: !!engine,
						characterAssemblerInitialized: !!characterAssembler,
						featureRegistryInitialized: !!featureRegistry,
						gameAPIInitialized: !!gameAPI,
						hasCharacterAssemblerMethod: characterAssembler && typeof characterAssembler.assembleCharacter === 'function',
						engineSubsystems: engine && typeof engine.getSubsystemNames === 'function' 
							? engine.getSubsystemNames() 
							: 'Unknown'
					};
					
					console.log(`${getTimestamp()} - Application initialized successfully:`, diagnosticInfo);
				} catch (initError) {
					console.error(`${getTimestamp()} - Failed to initialize application:`, initError);
					throw new Error(`Application initialization failed: ${initError instanceof Error ? initError.message : 'Unknown error'}`);
				}
			}
			
			// Create direct CharacterAssembler fallback if needed
			if (!characterAssembler && engine) {
				console.warn(`${getTimestamp()} - No characterAssembler from app, creating direct fallback`);
				try {
					// Try to create the assembler directly with available components
					characterAssembler = new CharacterAssembler(engine, gameAPI, featureRegistry);
					
					// Verify the fallback was created
					if (!characterAssembler) {
						throw new Error('Fallback CharacterAssembler constructor returned null or undefined');
					}
					
					// Check that the required method exists
					if (typeof characterAssembler.assembleCharacter !== 'function') {
						throw new Error('Fallback CharacterAssembler missing required assembleCharacter method');
					}
					
					console.log(`${getTimestamp()} - Fallback CharacterAssembler created successfully`);
				} catch (fallbackError) {
					console.error(`${getTimestamp()} - Failed to create fallback CharacterAssembler:`, fallbackError);
					
					// Last resort emergency fallback
					console.warn(`${getTimestamp()} - Creating emergency minimal CharacterAssembler`);
					characterAssembler = {
						assembleCharacter: async (character) => {
							console.warn(`${getTimestamp()} - Using emergency minimal CharacterAssembler`);
							return {
								...character,
								id: character.id,
								name: character.name || 'Character',
								totalLevel: 1,
								// Add minimum required properties
								strength: { total: 10, modifier: 0, label: 'Strength', modifiers: [] },
								dexterity: { total: 10, modifier: 0, label: 'Dexterity', modifiers: [] },
								constitution: { total: 10, modifier: 0, label: 'Constitution', modifiers: [] },
								intelligence: { total: 10, modifier: 0, label: 'Intelligence', modifiers: [] },
								wisdom: { total: 10, modifier: 0, label: 'Wisdom', modifiers: [] },
								charisma: { total: 10, modifier: 0, label: 'Charisma', modifiers: [] },
								skills: {},
								saves: { 
									fortitude: { total: 0, label: 'Fortitude', modifiers: [] }, 
									reflex: { total: 0, label: 'Reflex', modifiers: [] }, 
									will: { total: 0, label: 'Will', modifiers: [] } 
								},
								ac: { total: 10, label: 'AC', modifiers: [] },
								touch_ac: { total: 10, label: 'Touch AC', modifiers: [] },
								flat_footed_ac: { total: 10, label: 'Flat-footed AC', modifiers: [] }
							};
						}
					};
					console.log(`${getTimestamp()} - Emergency minimal CharacterAssembler created`);
				}
			}
			
			// Perform comprehensive verification of required components
			if (!engine) {
				console.error(`${getTimestamp()} - Game engine is missing after initialization`);
				throw new Error('Failed to initialize game engine');
			}
			
			if (!characterAssembler) {
				console.error(`${getTimestamp()} - Character assembler is missing after initialization`);
				throw new Error('Failed to initialize character assembler');
			}
			
			if (!rawCharacter.id) {
				console.error(`${getTimestamp()} - Raw character data is missing ID property`);
				throw new Error('Invalid character data: missing ID');
			}
			
			console.log(`${getTimestamp()} - Starting character assembly with ID: ${rawCharacter.id}`);
			console.log(`${getTimestamp()} - Character data preview:`, {
				id: rawCharacter.id,
				name: rawCharacter.name,
				ancestry: rawCharacter.game_character_ancestry?.length > 0 ? 'Present' : 'Missing',
				classes: rawCharacter.game_character_class?.length > 0 ? 'Present' : 'Missing'
			});
			
			// Assemble character data with safeguards
			try {
				// Verify assembler method exists (final check)
				if (typeof characterAssembler.assembleCharacter !== 'function') {
					throw new Error('Character assembler missing required assembleCharacter method');
				}
				
				character = await characterAssembler.assembleCharacter(rawCharacter);
				
				// Verify assembly results
				if (!character) {
					throw new Error('Character assembly returned null or undefined result');
				}
				
				console.log(`${getTimestamp()} - Character assembled successfully:`, { 
					id: character.id,
					name: character.name, 
					level: character.totalLevel,
					abilityScores: character.strength ? 'Present' : 'Missing',
					skills: character.skills ? 'Present' : 'Missing'
				});
			} catch (assemblyError) {
				console.error(`${getTimestamp()} - Error during character assembly:`, assemblyError);
				throw new Error(`Character assembly failed: ${assemblyError instanceof Error ? assemblyError.message : 'Unknown error'}`);
			}
			
			isLoading = false;
			console.log(`${getTimestamp()} - Character loading completed successfully`);
		} catch (err) {
			console.error(`${getTimestamp()} - Error loading character:`, err);
			console.error(`${getTimestamp()} - Diagnostic info:`, {
				hasRawCharacter: !!rawCharacter,
				rawCharacterId: rawCharacter?.id,
				hasEngine: !!engine,
				hasCharacterAssembler: !!characterAssembler,
				characterAssemblerMethods: characterAssembler ? Object.keys(characterAssembler).join(', ') : 'none',
				assembleMethodExists: characterAssembler && typeof characterAssembler.assembleCharacter === 'function',
				hasGameAPI: !!gameAPI,
				hasFeatureRegistry: !!featureRegistry,
				dataServerId: data?.id
			});
			isLoading = false;
			error = err instanceof Error ? err.message : 'An unknown error occurred';
		}
	}
	
	// Value selection callback for stats
	function handleSelectValue(e: CustomEvent<{ path: string, value: any }>) {
		console.log(`Selected value: ${e.detail.path} = ${e.detail.value}`);
	}
	
	// Cleanup handled in the onMount return function
</script>

{#if isLoading}
<div class="flex items-center justify-center h-screen">
	<div class="text-center">
		<p class="text-lg">Loading character...</p>
	</div>
</div>
{:else if error}
<div class="p-4">
	<div class="bg-red-100 text-red-800 p-4 rounded-md">
		<p class="font-semibold">Error loading character</p>
		<p>{error}</p>
		
		<details class="mt-2 text-xs">
			<summary class="cursor-pointer">Diagnostic Information</summary>
			<pre class="whitespace-pre-wrap mt-2 p-2 bg-gray-800 text-gray-200 rounded overflow-auto max-h-60">{JSON.stringify(diagnosticInfo, null, 2)}</pre>
		</details>
	</div>
</div>
{:else if character}
<div class="p-4 space-y-4">
	<div class="grid gap-4 md:grid-cols-2">
		<CharacterHeader 
			name={character.name} 
			race={character.game_character_ancestry?.[0]?.ancestry?.name} 
			class={character.game_character_class?.[0]?.class?.name}
			level={character.totalLevel}
		/>
		<HPTracker 
			maxHP={character.max_hp} 
			currentHP={character.current_hp}
		/>
	</div>
	
	<Tabs.Root value="stats" class="w-full">
		<Tabs.List class="w-full">
			<Tabs.Trigger value="stats">Stats</Tabs.Trigger>
			<Tabs.Trigger value="skills">Skills</Tabs.Trigger>
			<Tabs.Trigger value="combat">Combat</Tabs.Trigger>
			<Tabs.Trigger value="feats">Feats & Features</Tabs.Trigger>
			<Tabs.Trigger value="spells">Spells</Tabs.Trigger>
			<Tabs.Trigger value="items">Items</Tabs.Trigger>
		</Tabs.List>
		
		<div class="mt-4">
			<Tabs.Content value="stats" class="space-y-4">
				<div class="grid gap-4 md:grid-cols-2">
					<AbilityScores character={character} onSelectValue={handleSelectValue} />
					<Saves character={character} onSelectValue={handleSelectValue} />
				</div>
			</Tabs.Content>
			
			<Tabs.Content value="skills">
				<Skills character={character} />
			</Tabs.Content>
			
			<Tabs.Content value="combat" class="space-y-4">
				<div class="grid gap-4 md:grid-cols-2">
					<ACStats character={character} onSelectValue={handleSelectValue} />
					<CombatStats character={character} onSelectValue={handleSelectValue} />
				</div>
			</Tabs.Content>
			
			<Tabs.Content value="feats" class="space-y-4">
				<AncestryTraits character={character} />
				<ClassFeatures character={character} />
				<Archetypes character={character} />
				<Discoveries character={character} />
				<WildTalents character={character} />
				<KiPowers character={character} />
				<Bloodlines character={character} />
				<Feats character={character} />
				<Corruptions character={character} />
				<!-- Prerequisites component temporarily disabled -->
				<!-- <Prerequisites character={character} /> -->
			</Tabs.Content>
			
			<Tabs.Content value="spells" class="space-y-4">
				<SpellSlots character={character} />
				<Spells character={character} />
			</Tabs.Content>
			
			<Tabs.Content value="items" class="space-y-4">
				<Enhancements character={character} />
				<p>Additional item management coming soon</p>
			</Tabs.Content>
		</div>
	</Tabs.Root>
</div>
{:else}
<!-- No character data -->
<div class="p-4">
	<p>No character data available</p>
</div>
{/if}